'ООП в Python: https://www.youtube.com/playlist?list=PLQAt0m1f9OHvyjJNjZK_unnLwMOXPTja8'

'''________________ООП 1 Классы, объекты, экземпляры классов._______________'''
isinstance(4, int) #проверка принадлежности классу(типу)
#каждое значение в питоне представляет из себя объект какого-то класса
isinstance(list, object) #сами классы являются объектами
#класс - это шаблон с помощью которого создаются объекты
#в классе мы описываем какие данные будут хранить объекты и какое у них будет поведение

#cоздание класса
class Car:
    pass

Car() #cоздание экземпляра класса
a = Car() #присвоение экземпляра класса переменной

#класс с атрибутами
class Person:
    name = 'Ivan'
    age = 30

'''_____________________ООП 2 Атрибуты класса.______________________________________'''

#действия над атрибутами класса, изменения распространятся на каждый экземпляр класса
Person.name #обращение к атрибуту класса
Person.__dict__ #перечисление всех атрибутов класса

getattr(Person, 'x', 100)# если атрибута 'x' нет, то функция вернет третий аргумент (100 в данном случае)
Person.name = 'Misha' #изменение существующего или присвоение нового атрибута
setattr(Person, 'weight', '70') #изменение существующего или присвоение нового атрибута

del Person.weight #удаление атрибута
delattr(Person, 'age') #удаление атрибута

'''_________________ООП 3 Атрибуты экземпляра класса._______________________________'''

#над атрибутами экземпляра можно производить все те же действия, но изменения распространяться только на один экземпляр
#нельзя у экземпляра удалить атрибуты, которые он получает от класса
#если совпаадет название атрибута у класса и у экземпляра, то обращение идет атрибуту экземпляра

'''_________________ООП 4 Функция как атрибут класса. _______________________________'''

class Car:
    model = 'BMW'
    engine = 1.6

    def drive():
        print("Let's go")

#обращение к методу класса
Car.drive
getattr(Car, 'drive')

#вызов функции класса
Car.drive()
getattr(Car, 'drive')()

# так как в функции drive мы не передали аргумент self, этот метод экземпляры класса не смогут вызвать

'''_____________________ООП 5 Методы экземпляра. Аргумент self._______________________'''

class Cat:
    def hello(self):
        print('Hello world from kitty')
bob = Cat()

Cat.hello # <function Cat.hello at 0x000001C5C630A5E0>
bob.hello # <bound method Cat.hello of <__main__.Cat object at 0x000001C5C631AE80>>

# Чем отличается метод от функции:
# 1. Метод это та же самая функция, но она объявлена внутри класса
# 2. Метод привязан к конкретному объекту, функция не привязана ее можно отдельно вызывать
# 3. При вызове метода, тот объект с которым он связан будет автоматический проставляться в аргумент метода

class Cat:
    breed = 'pers'
    def hello(*args):
        print('Hello world from kitty', args)

    def show_breed(self):
        print(f'my breed is {self.breed}')
    def show_name(self):
        if hasattr(self, 'name'):
            print(f'my name is {self.name}')
        else:
            print('nothing')
    def set_value(self, value, age=0):
        self.name = value
        self.age = age


